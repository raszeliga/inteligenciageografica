# -*- coding: utf-8 -*-
"""
/***************************************************************************
 InteligenciaGeografica
                                 A QGIS plugin
 Plugin para auxiliar tomada de decisão quanto a localização de empreendimentos levando em conta sua localização espacial.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-07-11
        git sha              : $Format:%H$
        copyright            : (C) 2024 by R. A. Szeliga
        email                : rafaelsz@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.core import QgsProject, QgsField, QgsVectorLayer, QgsFeature, QgsMapLayerType
from qgis.core import QgsProcessingFeatureSourceDefinition
from qgis.core import *
from qgis.core import QgsFillSymbol, QgsLineSymbol
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QApplication, QMainWindow, QSpinBox, QPushButton, QFileDialog
from PyQt5.QtGui import QColor
from qgis import processing
from qgis.utils import iface
import os


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Inteligencia_Geografica_dialog import InteligenciaGeograficaDialog
import os.path


class InteligenciaGeografica:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'InteligenciaGeografica_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Inteligência Geográfica')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('InteligenciaGeografica', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Inteligencia_Geografica/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Inteligencia Geografica'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Inteligência Geográfica'),
                action)
            self.iface.removeToolBarIcon(action)


    def variaveis(self):
        self.distancia = self.dlg.spinBoxBuffer.value() # valor da largura do buffer



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = InteligenciaGeograficaDialog()

        # show the dialog
        self.dlg.show()
        self.dlg.comboBox_pontos.clear()

        # Obtém todos os layers do projeto
        layers = QgsProject.instance().layerTreeRoot().findLayers()

        # Filtra os layers do tipo ponto
        for layerPontos in layers:
            layer = layerPontos.layer()
            if layer.geometryType() == QgsWkbTypes.PointGeometry:
                self.dlg.comboBox_pontos.addItem(layer.name(), layer)
            
        self.dlg.show()
        self.dlg.comboBox_arruamentos.clear()
        # Obtém todos os layers do projeto
        layers = QgsProject.instance().layerTreeRoot().findLayers()
        # Filtra os layers do tipo linha
        for layerArruamentos in layers:
            layer = layerArruamentos.layer()
            if layer.geometryType() == QgsWkbTypes.LineGeometry:
                self.dlg.comboBox_arruamentos.addItem(layer.name(), layer)
            
        self.dlg.show()
        self.dlg.comboBox_contagens.clear()
                # Obtém todos os layers do projeto
        layers = QgsProject.instance().layerTreeRoot().findLayers()
        # Filtra os layers do tipo ponto
        for layerContagens in layers:
            layer = layerContagens.layer()
            if layer.geometryType() == QgsWkbTypes.PointGeometry:
                self.dlg.comboBox_contagens.addItem(layer.name(), layer)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.variaveis() #utilização da variável para execução do buffer
            index = self.dlg.comboBox_pontos.currentIndex()
            layerescolhido1= self.dlg.comboBox_pontos.itemData(index)
            layerPontos = QgsProject.instance().mapLayersByName(layerescolhido1.name())[0]

            #puxando o valor numerico especificado na SpinBox

        
            #buffer com dissolve
            parametros_buffer = {'INPUT':layerPontos,
                                 'DISTANCE':self.distancia,
                                 'SEGMENTS':5,
                                 'END_CAP_STYLE':0,
                                 'JOIN_STYLE':0,
                                 'MITER_LIMIT':2,
                                 'DISSOLVE':True,
                                 'SEPARATE_DISJOINT':False,
                                 'OUTPUT':'TEMPORARY_OUTPUT'}
            
            processing.runAndLoadResults("native:buffer", parametros_buffer)

            ### Eliminando as colunas da Bordeada ###
            layerBordeada = QgsProject.instance().mapLayersByName('Bordeada')[0]
            # Iniciar a edição do layer
            layerBordeada.startEditing()

            # Obter todos os índices de colunas, exceto a primeira
            columns_to_delete = list(range(1, len(layerBordeada.fields())))

            # Ordenar os índices em ordem decrescente para evitar problemas ao deletar múltiplas colunas
            columns_to_delete.sort(reverse=True)

            # Deletar todas as colunas, exceto a primeira
            for column_index in columns_to_delete:
                layerBordeada.deleteAttribute(column_index)

            # Verificar se o layer é um layer de polígonos
            if layerBordeada.geometryType() == QgsWkbTypes.PolygonGeometry:
                # Adicionar uma nova coluna para a área, se ainda não existir
                if 'Area' not in [field.name() for field in layerBordeada.fields()]:
                    layerBordeada.addAttribute(QgsField('Area', QVariant.Double))
                    layerBordeada.updateFields()
                    
                    # Obter o índice da nova coluna
                    area_idx = layerBordeada.fields().indexFromName('Area')

                    # Iterar sobre cada feature no layer
                    for feature in layerBordeada.getFeatures():
                        # Obter a geometria da feature
                        geometry = feature.geometry()

                        # Calcular a área
                        area = geometry.area()
                        area = round(area/100000, 2)
                        
                        
                        # Atualizar o valor da nova coluna com a área calculada
                        layerBordeada.changeAttributeValue(feature.id(), area_idx, area)

            # Salvar as mudanças
            layerBordeada.commitChanges()

            # Atualizar a camada para refletir as mudanças
            layerBordeada.updateFields()
            
            index = self.dlg.comboBox_arruamentos.currentIndex()
            layerescolhido2 = self.dlg.comboBox_arruamentos.itemData(index)
            layerArruamentos = QgsProject.instance().mapLayersByName(layerescolhido2.name())[0]
            
            # fazendo o recorte
            parametros_recorte = {'INPUT':layerArruamentos,
                                  'OVERLAY':layerBordeada,
                                  'OUTPUT':'TEMPORARY_OUTPUT'}
                                  
            processing.runAndLoadResults("native:clip", parametros_recorte)

            ### Eliminando as colunas do Recortado ###
            layerRecortado = QgsProject.instance().mapLayersByName('Recortado')[0]
            # Iniciar a edição do layer
            layerRecortado.startEditing()

            # Obter todos os índices de colunas, exceto a primeira
            columns_to_delete = list(range(1, len(layerRecortado.fields())))
            
            # Ordenar os índices em ordem decrescente para evitar problemas ao deletar múltiplas colunas
            columns_to_delete.sort(reverse=True)

            # Deletar todas as colunas, exceto a primeira
            for column_index in columns_to_delete:
            # Salvar as mudanças
                layerRecortado.deleteAttribute(column_index)

            layerRecortado.commitChanges()

            # Atualizar a camada para refletir as mudanças
            layerRecortado.updateFields()
            
            ### Falta aplicar o Dissolve e calcular o comprimento das vias
            
            # fazendo o dissolve
            parametros_dissolve = {'INPUT':layerRecortado,
                                    'FIELD': [],
                                    'OUTPUT':'TEMPORARY_OUTPUT'}
                                    
            processing.runAndLoadResults("native:dissolve", parametros_dissolve)
            
            # Removendo as camadas temporárias
            layer_id = QgsProject.instance().mapLayersByName('Recortado')[0].id()
            QgsProject.instance().removeMapLayer(layer_id)
            
            layerDissolvido = QgsProject.instance().mapLayersByName('Dissolvido')[0]

            # Verificar se o layer é um layer de linhas
            if layerDissolvido.geometryType() == QgsWkbTypes.LineGeometry:
                # Iniciar a edição do layer
                layerDissolvido.startEditing()

                # Adicionar uma nova coluna para o comprimento, se ainda não existir
                if 'Comp' not in [field.name() for field in layerDissolvido.fields()]:
                    layerDissolvido.addAttribute(QgsField('Comp', QVariant.Double))
                    layerDissolvido.updateFields()

                # Obter o índice da nova coluna
                length_idx = layerDissolvido.fields().indexFromName('Comp')

                # Iterar sobre cada feature no layer
                for feature in layerDissolvido.getFeatures():
                    # Obter a geometria da feature
                    geometry = feature.geometry()
                    
                    # Calcular o comprimento
                    comp = geometry.length()
                    comp = round(comp/1000, 2)
                    
                    # Atualizar o valor da nova coluna com o comprimento calculado
                    layerDissolvido.changeAttributeValue(feature.id(), length_idx, comp)

                # Salvar as mudanças
                layerDissolvido.commitChanges()
                # Atualizar a camada para refletir as mudanças
                layerDissolvido.updateFields()
            
                layer1 = QgsProject.instance().mapLayersByName('Bordeada')[0]

            # Verificar se o layer é um layer de polígonos
            if layer1.geometryType() == QgsWkbTypes.PolygonGeometry:
                # Criar um novo símbolo de preenchimento
                symbol = QgsFillSymbol.createSimple({'color': '#ca9696'})

                # Aplicar o novo símbolo ao renderizador do layer
                layer1.renderer().setSymbol(symbol)

                # Atualizar a renderização do layer
                layer1.triggerRepaint()
                    
            # Carregar o layer de linhas. Substitua 'layer_name' pelo nome do seu layer
            layer2 = QgsProject.instance().mapLayersByName('Dissolvido')[0]

            # Verificar se o layer é um layer de linhas
            if layer2.geometryType() == QgsWkbTypes.LineGeometry:
                # Criar um novo símbolo de linha
                symbol = QgsLineSymbol.createSimple({'color': '#ff0000', 'width': '.1'})  

                # Aplicar o novo símbolo ao renderizador do layer
                layer2.renderer().setSymbol(symbol)

                # Atualizar a renderização do layer
                layer2.triggerRepaint()

            # Verificar se o layer é um layer de linhas
            if layerArruamentos.geometryType() == QgsWkbTypes.LineGeometry:
                # Criar um novo símbolo de linha
                symbol = QgsLineSymbol.createSimple({'color': '#868686',
                                                     'width': '.1'})  

                # Aplicar o novo símbolo ao renderizador do layer
                layerArruamentos.renderer().setSymbol(symbol)

                # Atualizar a renderização do layer
                layerArruamentos.triggerRepaint()
            
            # atribuir a seleção da caixa de diálogos ao nome do layer escolhido
            index = self.dlg.comboBox_contagens.currentIndex()
            layerescolhido3 = self.dlg.comboBox_contagens.itemData(index)
            layerContagens = QgsProject.instance().mapLayersByName(layerescolhido3.name())[0]

            parametros_contagem = {'POLYGONS':'Bordeada',
                                   'POINTS':layerContagens,
                                   'WEIGHT':'',
                                   'CLASSFIELD':'',
                                   'FIELD':'NUMPOINTS',
                                   'OUTPUT':'TEMPORARY_OUTPUT'}
            processing.runAndLoadResults("native:countpointsinpolygon", parametros_contagem)
            
            #resgatando a informação de dentro da tabela de atributos
            layer = QgsProject.instance().mapLayersByName("Contagem")[0]
            features = layer.getFeatures()
            for feature in features:
                contagem_pontos = feature['NUMPOINTS']
                contagem_pontos = int(contagem_pontos)
            
            QMessageBox.information(self.iface.mainWindow(),"Informações","A camada %s tem %d feições. Sua área de influência especificada ocupa %.2f km² e sobrepõe %.2f km de vias. Essa área engloba %d feições da camada %s" %(layerPontos.name(),layerPontos.featureCount(), area, comp, contagem_pontos, layerContagens.name()))
           
            # Obtem a camada para a qual deseja centralizar o zoom
            layer = QgsProject.instance().mapLayersByName('Bordeada')[0]

            # Obtem a extensão espacial da camada
            extent = layer.extent()

            # Ajusta o zoom para a extensão da camada
            iface.mapCanvas().setExtent(extent)

            # Atualiza a tela
            iface.mapCanvas().refresh()
            
            # Trocando os nomes dos layers
            layer = QgsProject.instance().mapLayersByName('Bordeada')[0]
            # Novo nome para o layer
            nome_novo = 'Area_Cobertura'
            # Renomear o layer
            layer.setName(nome_novo)
            
            layer = QgsProject.instance().mapLayersByName('Dissolvido')[0]
            # Novo nome para o layer
            nome_novo = 'Ruas_Atingidas'
            # Renomear o layer
            layer.setName(nome_novo)
            
            layer = QgsProject.instance().mapLayersByName('Contagem')[0]
            # Novo nome para o layer
            nome_novo = 'Pontos_Sobrepostos'
            # Renomear o layer
            layer.setName(nome_novo)
            
            # movendo os layers de posição
            def move_layer_to_position(layer_name, position):
                # Obter a raiz da árvore de camadas
                root = QgsProject.instance().layerTreeRoot()
                
                # Encontrar o nó do layer pelo nome
                layer_node = root.findLayer(QgsProject.instance().mapLayersByName(layer_name)[0].id())
                
                if layer_node:
                    # Mover o layer para a posição especificada
                    root.insertChildNode(position, layer_node.clone())
                    root.removeChildNode(layer_node)

            # Exibindo um relatório
            # Função para salvar o relatório
            def salvar_relatorio():
                # Abrir uma janela de diálogo para o usuário escolher o local de salvamento
                options = QFileDialog.Options()
#                options |= QFileDialog.DontUseNativeDialog
                file_path, _ = QFileDialog.getSaveFileName(None, "Salvar Relatório", "", "Text Files (*.txt);;All Files (*)", options=options)

                if file_path:
                    # Exibindo um relatório
                    with open(file_path, 'w') as output_file:
                        conteudo = "A camada %s tem %d feições. Sua área de influência especificada ocupa %.2f km² e sobrepõe %.2f km de vias. Essa área engloba %d feições da camada %s" % (
                            layerPontos.name(), layerPontos.featureCount(), area, comp, contagem_pontos, layerContagens.name()
                        )
                        conteudo = str(conteudo)
                        output_file.write(conteudo)

            # Chamar a função para salvar o relatório
            salvar_relatorio()

            # Posição desejada (0 para topo, 1 para segundo, etc.)
            move_layer_to_position('Ruas_Atingidas', 0)
            move_layer_to_position('Area_Cobertura', 1)
            move_layer_to_position('Pontos_Sobrepostos', 2)

#            output_file = open('C:/Users/rafae/OneDrive/PósGrad/2023 PPGCG/Disciplinas/2024/7009 - Desenvolvimento de Aplicações/TrabFinal/Relatorio.txt', 'w')
#            conteudo = "A camada %s tem %d feições. Sua área de influência especificada ocupa %.2f km² e sobrepõe %.2f km de vias. Essa área engloba %d feições da camada %s" %(layerPontos.name(),layerPontos.featureCount(), area, comp, contagem_pontos, layerContagens.name())
#            conteudo = str(conteudo)
#            output_file.write(conteudo)
#            output_file.close()

